dnl Process this file with autoconf to produce a configure script.

dnl This is only to make me comfortable -- they should be null by default.

CFLAGS=""
LDFLAGS=""
CPPFLAGS=""

AC_INIT(include/class.h)

AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADER(include/setup.h)

PACKAGE=ShadowIRCd
VERSION=1.3
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)


dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
AC_CANONICAL_SYSTEM
AC_AIX
AC_PROG_MAKE_SET
AC_PATH_PROG(RM,rm)
AC_PATH_PROG(CP,cp)
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Stolen from dancer, which stole it from debian dpkg. hee.
AC_DEFUN(SHADOW_GCC_TRY_FLAGS,[
 AC_MSG_CHECKING([GCC warning flag(s): $1])
 if test "${GCC-no}" = yes
 then
  AC_CACHE_VAL($2,[
   oldcflags="${CFLAGS-}"
   CFLAGS="${CFLAGS-} ${CWARNS} $1 -Werror"
   AC_TRY_COMPILE([
#include <string.h>
#include <stdio.h>
int main(void);
],[
    strcmp("a","b"); fprintf(stdout,"test ok\n");
], [$2=yes], [$2=no])
   CFLAGS="${oldcflags}"])
  if test "x$$2" = xyes; then
   CWARNS="${CWARNS}$1 "
   AC_MSG_RESULT(ok)
  else
   $2=''
   AC_MSG_RESULT(no)
  fi
 else
  AC_MSG_RESULT(no, not using GCC)
 fi
])

dnl Checks for libraries.
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(z, main)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_FUNC(res_mkquery,, AC_CHECK_LIB(resolv, res_mkquery))
AC_CHECK_LIB(socket, socket)
AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(descrypt, crypt,,AC_CHECK_LIB(crypt, crypt,,)))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/param.h unistd.h string.h strings.h sys/syslog.h stdlib.h stddef.h stropts.h limits.h)
AC_CHECK_HEADER(malloc.h, AC_DEFINE(MALLOCH, <malloc.h>))
AC_CHECK_HEADERS(poll.h sys/devpoll.h sys/event.h)
AC_MSG_CHECKING(MIN and MAX definition)
AC_EGREP_CPP(yes,
[
#if defined( HAVE_SYS_PARAM_H )
#include <sys/param.h>
#ifdef MIN
  yes
#endif
#endif
], AC_DEFINE(HAVE_MINMAX) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl try mmap() support
AC_FUNC_MMAP


dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS(index strerror strtoken strtok inet_addr inet_ntoa inet_netof inet_aton)
AC_CHECK_FUNCS(gettimeofday lrand48 sigaction bzero bcmp bcopy)
AC_CHECK_FUNCS(dn_skipname __dn_skipname getrusage times, break)

dnl taken from ircd's Config script

nonblock=no

AC_MSG_CHECKING(for a nonblocking sockets implementation)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined(O_NONBLOCK)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NONBLOCK))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_POSIX)
nonblock=yes
AC_MSG_RESULT(O_NONBLOCK),
AC_MSG_RESULT(no), AC_MSG_RESULT(can't tell))

if test $nonblock = no; then
AC_MSG_CHECKING(for bsd (O_NDELAY) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined( O_NDELAY ) && !defined( NBLOCK_POSIX )
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NDELAY))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_BSD)
nonblock=yes
AC_MSG_RESULT(O_NDELAY),
AC_MSG_RESULT(no), AC_MSG_RESULT(can't tell))
fi

if test $nonblock = no; then
AC_MSG_CHECKING(for sysv (FIONBIO) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if !defined(NBLOCK_BSD) && !defined(NBLOCK_POSIX) && defined(FIONBIO)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, FIONBIO))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif /* !NBLOCK_POSIX && !NBLOCK_BSD && FIONBIO */
	exit(1);
}
], AC_DEFINE(NBLOCK_SYSV)
nonblock=yes
AC_MSG_RESULT(FIONBIO),
AC_MSG_RESULT(no),
AC_MSG_RESULT(unable to test))
fi

if test $nonblock = no; then
AC_MSG_ERROR(No nonblocking socket implementation found. ircd requires nonblocking sockets.)
fi

dnl taken from ircd's Config script
AC_MSG_CHECKING(signal implementation)
AC_TRY_RUN(
[
int main()
{
#if defined(HAVE_SIGACTION)
	exit(0);
#else
	exit(1);
#endif
}
], AC_DEFINE(POSIX_SIGNALS) AC_MSG_RESULT(posix),
    AC_TRY_RUN(
[
#include <signal.h>
int calls = 0;
void handler()
{
	if (calls) return;
 	calls++;
	kill(getpid(), SIGTERM);
	sleep(1);
}
int main()
{
	signal(SIGTERM, handler);
	kill(getpid(), SIGTERM);
	exit (0);
}
], AC_DEFINE(BSD_RELIABLE_SIGNALS) AC_MSG_RESULT(bsd),
    AC_DEFINE(SYSV_UNRELIABLE_SIGNALS) AC_MSG_RESULT(sysv), AC_MSG_RESULT(uknown)),
AC_MSG_RESULT(unknown))
dnl Check for sys_errlist
dnl Stolen from BitchX
AC_MSG_CHECKING(for sys_errlist declaration)
AC_TRY_RUN([
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
main()
{
  char *s = sys_errlist[0];
	  exit(0);
}
],
  AC_MSG_RESULT(yes)
  AC_DEFINE(SYS_ERRLIST_DECLARED),
  AC_MSG_RESULT(no), AC_MSG_RESULT(cross compiling))

dnl Check to see if we should set USE_FAST_FD_ISSET
AC_MSG_CHECKING(to see if we should enable fast FD_ISSET code)
AC_TRY_COMPILE(, [
#include <sys/types.h>

int main()
{
  fd_set read_set;
  read_set.fds_bits;
  exit(0);
}
], 
  AC_MSG_RESULT(yes)
  AC_DEFINE(USE_FAST_FD_ISSET),
  AC_MSG_RESULT(no))

dnl Check to see if we have a broken FD_SETSIZE

DFDSS='-DFD_SETSIZE=1024'

AC_MSG_CHECKING(to see if FD_SETSIZE is broken)
AC_TRY_RUN([
#define FD_SETSIZE 666
#include <sys/types.h>
#include <sys/time.h>

int main()
{
  if(FD_SETSIZE != 666)
     exit(1);
  exit(0);
}
], 
AC_MSG_RESULT(no),
AC_MSG_RESULT(YES)
AC_MSG_WARN(FD_SETSIZE is hard set by your operating system)
AC_MSG_WARN(MAXCONNECTIONS must be no higher than the hardwired FD_SETSIZE)
DFDSS="",
AC_MSG_RESULT(can't tell))

AC_SUBST(DFDSS)

ac_cv_nicklen="32"
ac_cv_topiclen="512"

dnl Nicklen
AC_MSG_CHECKING(what to set NICKLEN to)
AC_ARG_WITH(nicklen,
[  --with-nicklen=LENGTH        Set the nick length to LENGTH. ],

[
  if test "$withval" = "no"; then
        ac_cv_nicklen="30"
  else
        ac_cv_nicklen="$withval"
  fi
])
AC_MSG_RESULT($ac_cv_nicklen)
AC_DEFINE_UNQUOTED(NICKLEN, ${ac_cv_nicklen})

dnl Topiclen
AC_MSG_CHECKING(what to set TOPICLEN to)
AC_ARG_WITH(topiclen,
[  --with-topiclen=LENGTH        Set the topic length to LENGTH. ],

[
  if test "$withval" = "no"; then
        ac_cv_topiclen="307"
  else
        ac_cv_topiclen="$withval"
  fi
])
AC_MSG_RESULT($ac_cv_topiclen)
AC_DEFINE_UNQUOTED(TOPICLEN, ${ac_cv_topiclen})

dnl IRCd dirs
AC_MSG_CHECKING(where configuration files should go)
ac_cv_dpath="`pwd`/conf/"
AC_MSG_RESULT($ac_cv_dpath)
AC_DEFINE_UNQUOTED(DPATH, "${ac_cv_dpath}")
AC_MSG_CHECKING(where to install the ircd binary)
ac_cv_spath="`pwd`/src/ircd"
AC_MSG_RESULT($ac_cv_spath)
AC_DEFINE_UNQUOTED(SPATH, "${ac_cv_spath}")

dnl by default, enable throttling.
cf_enable_throttling="auto"

AC_MSG_CHECKING(the maximum amount of file descriptors that can be used)
ac_cv_fdlimit=`ulimit -Hn`
AC_MSG_RESULT($ac_cv_fdlimit)
AC_DEFINE_UNQUOTED(HARD_FDLIMIT_, ${ac_cv_fdlimit})

AC_MSG_CHECKING(the amount of file descriptors to be used for connections)
ac_cv_maxcon=`expr $ac_cv_fdlimit - 24`
AC_MSG_RESULT($ac_cv_maxcon)
AC_DEFINE_UNQUOTED(INIT_MAXCLIENTS, ${ac_cv_maxcon})

AC_MSG_CHECKING(the amount of file descriptors to be used for buffering)
ac_cv_maxbuffer=`expr $ac_cv_fdlimit - $ac_cv_maxcon`
AC_MSG_RESULT($ac_cv_maxbuffer)
AC_DEFINE_UNQUOTED(MAX_BUFFER, ${ac_cv_maxbuffer})

dnl maxsendq

ac_cv_maxsendq="5050000"

AC_MSG_CHECKING(what the maximum SendQ should be)
AC_ARG_WITH(maxsendq,
[  --with-maxsendq=LENGTH        Set the maximum SendQ to LENGTH. ],

[
  if test "$withval" = "no"; then
        ac_cv_maxsendq="5050000"
  else
        ac_cv_maxsendq="$withval"
  fi
])
AC_MSG_RESULT($ac_cv_maxsendq)
AC_DEFINE_UNQUOTED(MAXSENDQLENGTH, ${ac_cv_maxsendq})

dnl bufferpool

ac_cv_bufferpool="(4 * MAXSENDQLENGTH)"

AC_MSG_CHECKING(what the size of the buffer pool should be)
AC_ARG_WITH(bufferpool,
[  --with-bufferpool=(int|"string")        Sets the bufferpool to a number or an equation. ],

[
  if test "$withval" = "no"; then
        ac_cv_bufferpool="(4 * MAXSENDQLENGTH)"
  else
        ac_cv_bufferpool="$withval"
  fi
])
AC_MSG_RESULT($ac_cv_bufferpool)
AC_DEFINE_UNQUOTED(BUFFERPOOL, ${ac_cv_bufferpool})

dnl check if we should use poll over select.
AC_MSG_CHECKING(if we should use poll or select)
case "$host" in
    *-linux*)
        unet_poll_syscall=yes
        ;;

    *-solaris*)
        if test x"$ac_cv_header_poll_h" = xyes; then
            unet_poll_syscall=yes
        else
            unet_poll_syscall=no
        fi
        ;;

    *-sunos*)
        unet_poll_syscall=no
        ;;

    *-openbsd*)
        if test x"$ac_cv_header_poll_h" = xyes; then
            unet_poll_syscall=yes
        else
            unet_poll_syscall=no
        fi
        ;;

    *-*bsd*)
        if test x"$ac_cv_header_poll_h" = xyes; then
            unet_poll_syscall=yes
        else
            unet_poll_syscall=no
        fi
        ;;

    *-darwin*)
        unet_poll_syscall=no
        ;;

    *)
        unet_poll_syscall=no
        ;;
esac

unet_cv_enable_poll=$unet_poll_syscall

# Force poll to be disabled if there is no poll.h
if test x"$ac_cv_header_poll_h" != xyes; then
    unet_cv_enable_poll=no
fi

if test x"$unet_cv_enable_poll" = xyes; then
    AC_DEFINE(USE_POLL)
    CFLAGS="$CFLAGS -DUSE_POLL"
    AC_MSG_RESULT(poll)
else
    AC_MSG_RESULT(select)
fi

dnl Throttle enabling
AC_MSG_CHECKING(if throttling should be enabled)
AC_ARG_ENABLE(throttling,
[  --enable-throttling          Enable serverside throttling support. (Default)
  --disable-throttling         Disable serverside throttling support. ],
[ cf_enable_throttling=$enableval ],
[ cf_enable_throttling="auto" ])

if test "X$cf_enable_throttling" != "Xno" ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(THROTTLE_ENABLE)
else
  AC_MSG_RESULT(no)
fi

dnl Throttle enabling
AC_MSG_CHECKING(whether operator passwords should be encrypted or not)
AC_ARG_ENABLE(cryptpass,
[  --enable-cryptpass           Enable operator password encryption.
  --disable-cryptpass          Disable operator password encryption. (Default) ],
[ cf_enable_cryptpass=$enableval ],
[ cf_enable_cryptpass="yes" ])

if test "X$cf_enable_cryptpass" != "Xno" ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(CRYPT_OPER_PASSWORD)
else
  AC_MSG_RESULT(no)
fi

dnl acebot protection
AC_MSG_CHECKING(whether acebot protection should be enabled or not)
AC_ARG_ENABLE(acebot,
[  --enable-acebot              Enable ACEBOT protection. (Default)
  --disable-acebot             Disable ACEBOT protection. ],
[ cf_enable_acebot=$enableval ],
[ cf_enable_acebot="yes" ])

if test "X$cf_enable_acebot" != "Xno" ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(REJECT_ACEBOTS)
else
  AC_MSG_RESULT(no)
fi

dnl OpenSSL support
AC_MSG_CHECKING(for OpenSSL)
AC_ARG_ENABLE(openssl,
[  --enable-openssl[=DIR]       Enable OpenSSL support (DIR optional).
  --disable-openssl            Disable OpenSSL support. ],
[ cf_enable_openssl=$enableval ],
[ cf_enable_openssl="auto" ])

if test "X$cf_enable_openssl" != "Xno" ; then
  cf_openssl_basedir=""
  if test "X$cf_enable_openssl" != "Xauto" &&
     test "X$cf_enable_openssl" != "Xyes" ; then
     dnl Support for --enable-openssl=/some/place
     cf_openssl_basedir="${cf_enable_openssl}"
  else
    dnl Do the auto-probe here.  Check some common directory paths.
    for dirs in /usr/local/ssl /usr/pkg /usr/local \
                /usr/local/openssl ; do
      if test -f "${dirs}/include/openssl/opensslv.h" ; then
        cf_openssl_basedir="${dirs}"
        break
      fi
    done
    unset dirs
  fi
  dnl Now check cf_openssl_found to see if we found anything.
  if test "X$cf_openssl_basedir" != "X" ; then
    if test -f "${cf_openssl_basedir}/include/openssl/opensslv.h" ; then
      SSL_INCLUDES="-I${cf_openssl_basedir}/include"
      SSL_LIB="-L${cf_openssl_basedir}/lib"
    else
      dnl OpenSSL wasn't found in the directory specified.  Naughty
      dnl administrator...
      cf_openssl_basedir=""
    fi
  else
    dnl Check for stock FreeBSD 4.x and 5.x systems, since their files
    dnl are in /usr/include and /usr/lib.  In this case, we don't want to
    dnl change INCLUDES or LIBS, but still want to enable OpenSSL.
    dnl We can't do this check above, because some people want two versions
    dnl of OpenSSL installed (stock FreeBSD 4.x/5.x and /usr/local/ssl)
    dnl and they want /usr/local/ssl to have preference.
    if test -f "/usr/include/openssl/opensslv.h" ; then
      cf_openssl_basedir="/usr"
    fi
  fi
  dnl If we have a basedir defined, then everything is okay.  Otherwise,
  dnl we have a problem.
  if test "X$cf_openssl_basedir" != "X" ; then
    AC_MSG_RESULT($cf_openssl_basedir)
    cf_enable_openssl="yes"
  else
    AC_MSG_RESULT(not found.  Please check your path.)
    cf_enable_openssl="no"
  fi
  unset cf_openssl_basedir
else
  dnl If --disable-openssl was specified
  AC_MSG_RESULT(disabled)
fi



if test "X$cf_enable_openssl" != "Xno"; then
    dnl Check OpenSSL version (must be 0.9.6 or above!)
    AC_MSG_CHECKING(for OpenSSL 0.9.6 or above)
    AC_TRY_RUN(
    [
#include <openssl/opensslv.h>
#include <stdlib.h>
int main(void) {
  if ( (OPENSSL_VERSION_NUMBER & 0x00906000) == 0x00906000)
  {
    exit(0);
  }
  exit(1);
}
    ], cf_openssl_version_ok='yes',
       cf_openssl_version_ok='no',
       cf_openssl_version_ok='no')

    if test "X$cf_openssl_version_ok" = "Xyes"; then
        AC_MSG_RESULT(ok)
	AC_DEFINE(USE_SSL)
	ENCRYPT_SRC="rc4.c dh.c"
	AC_SUBST(ENCRYPT_SRC)
	AC_DEFINE(HAVE_ENCRYPTION_ON)

        SSL_LIB="$SSL_LIB -lssl -lcrypto"
	AC_SUBST(SSL_LIB)
	AC_SUBST(SSL_INCLUDES)
    else
        AC_MSG_RESULT(no - OpenSSL support disabled)
    fi
fi
save_LIBS="$LIBS"
LIBS="$LIBS $SSL_LIB"

dnl check for warning flags we can use. ;-)
SHADOW_GCC_TRY_FLAGS([-Wall], cv_c_gcc_w_all)
orig_CFLAGS=$CFLAGS
ac_save_CFLAGS="${CWARNS}${orig_CFLAGS}"
CFLAGS=${ac_save_CFLAGS}

dnl don't add more of these unless it's critical.  Trying to get rid of them.
AC_MSG_CHECKING(operating system)
case "$target" in
*-darwin*) AC_DEFINE(OS_DARWIN) AC_MSG_RESULT(Mac OS X or OpenDarwin) ;;
*-solaris2*) AC_DEFINE(OS_SOLARIS2) AC_MSG_RESULT(Solaris 2.x) ;;
*-aix*) AC_DEFINE(OS_AIX) AC_MSG_RESULT(AIX) ;;
*-esix*) AC_DEFINE(OS_ESIX) AC_MSG_RESULT(ESIX) ;;
*-next*) AC_DEFINE(OS_NEXT) AC_MSG_RESULT(NeXT something) ;;
*-mips*) AC_DEFINE(OS_MIPS) AC_MSG_RESULT(MIPS something) ;;
*-sequent-ptx*) AC_DEFINE(OS_DYNIXPTX) AC_MSG_RESULT(Dynix PTX) ;;
*-hpux*) AC_DEFINE(OS_HPUX) AC_MSG_RESULT(HP-UX) ;;
*) AC_MSG_RESULT(nothing special required) ;;
esac

AC_OUTPUT(Makefile src/Makefile tools/Makefile)
echo ""
echo "    ShadowIRCd version family: $VERSION"
echo "               Compiler Flags: $CFLAGS"
echo "              Compiler Target: $target"
echo ""
if test "X$cf_openssl_version_ok" = "Xyes"; then
echo "If you want to make an SSL certificate (needed, if you're using"
echo "SSL), then type ./sslsetup now, then compile. Otherwise, rerun"
echo "./configure with --disable-openssl."
echo ""
fi
echo "When you are ready to compile," 
echo "Type make (or possibly gmake) to compile ShadowIRCd."
echo ""
